include "std.phtn"

// Constants
macro SIM_STACK_CAP 1024 end
macro OP_STACK_CAP 1024 end
macro MEM_CAPACITY 640000 end

// Loc Constants
macro sizeof(Loc) 24 end
macro Loc.filename 0 end
macro Loc.line_num 8 end
macro Loc.col_num 16 end

// Op Constants
macro sizeof(Op) 16 end
macro Op.type 0 end
macro Op.operand 8 end

// Operation Enum
macro OP_PUSH_INT   0 end
macro OP_INTRINSIC  1 end
macro OP_COUNT      2 end

// Intrinsic Enum
macro INTRINSIC_ADD         0  end
macro INTRINSIC_PRINT       1  end
macro INTRINSIC_SUB         2  end
macro INTRINSIC_MUL         3  end
macro INTRINSIC_DUP         4  end
macro INTRINSIC_DROP        5  end
macro INTRINSIC_DIV         6  end
macro INTRINSIC_EQUAL       7  end
macro INTRINSIC_LT          8  end
macro INTRINSIC_GT          9  end
macro INTRINSIC_LTE         10 end
macro INTRINSIC_GTE         11 end
macro INTRINSIC_NE          12 end
macro INTRINSIC_AND         13 end
macro INTRINSIC_OR          14 end
macro INTRINSIC_BITNOT      15 end
macro INTRINSIC_SHIFT_RIGHT 16 end
macro INTRINSIC_SHIFT_LEFT  17 end
macro INTRINSIC_SWAP        18 end
macro INTRINSIC_OVER        19 end
macro INTRINSIC_ROT         20 end
macro INTRINSIC_SYSCALL0    21 end
macro INTRINSIC_SYSCALL1    22 end
macro INTRINSIC_SYSCALL2    23 end
macro INTRINSIC_SYSCALL3    24 end
macro INTRINSIC_SYSCALL4    25 end
macro INTRINSIC_SYSCALL5    26 end
macro INTRINSIC_SYSCALL6    27 end
macro INTRINSIC_CAST_PTR    28 end
macro INTRINSIC_CAST_INT    29 end
macro INTRINSIC_CAST_BOOL   30 end
macro INTRINSIC_COUNT       31 end

// Memory layout
memory writed_buffer PUTD_BUFFER_CAP end
memory fd sizeof(u64) end
memory main_filename sizeof(ptr) end
memory loc sizeof(Loc) end
memory stat_buffer sizeof(stat) end
memory content sizeof(Str) end
memory line sizeof(Str) end
memory word sizeof(Str) end
memory sim_stack_count sizeof(u64) end
memory sim_stack sizeof(u64) SIM_STACK_CAP * end
memory op_stack_count sizeof(u64) end
memory op_stack sizeof(Op) OP_STACK_CAP * end
memory as_argv sizeof(ptr) 5 * end
memory ld_argv sizeof(ptr) 5 * end
memory empty_env sizeof(ptr) end

proc write_fd // n: int s: ptr
    dup2
    fd @8
    write
    if dup -1 == do
        here eputs "[ERROR] Could not write: " eputs rot rot eputsln
        1 exit drop
    else drop3 end
end

// writes int into fd
proc writed_fd // n: int
  if dup 0 == do
    "0" write_fd
  else
    if dup 0 < do
      "-" write_fd
      0 swap -
    end
    writed_buffer PUTD_BUFFER_CAP +
    while over 0 > do
      1 - dup rot
      10 dup2 / rot rot %
      rot swap '0' + swap ! swap
    end
    dup
    writed_buffer PUTD_BUFFER_CAP + swap - swap write_fd
  end
  drop
end

proc com_setup
    NULL empty_env !8
    // TODO: get output filename from input filename
    "/usr/bin/as\0" as_argv !8
    "-o\0" as_argv sizeof(ptr) 1 * + !8
    "output.o\0" as_argv sizeof(ptr) 2 * + !8
    "output.s\0" as_argv sizeof(ptr) 3 * + !8

    "/usr/bin/ld\0" ld_argv !8
    "-o\0" ld_argv sizeof(ptr) 1 * + !8
    "output\0" ld_argv sizeof(ptr) 2 * + !8
    "output.o\0" ld_argv sizeof(ptr) 3 * + !8
end

proc call_proc // proc_argv: ptr
    // TODO: create a std proc for converting c-string to photon string literal
    dup @8 ->ptr dup strlen swap putsln
    fork

    if dup -1 == do
        "[ERROR] Could not do fork" eputsln 1 exit
    end

    if dup getpid == do
        drop
        empty_env
        swap dup @8
        execve
        if dup -1 == do
            "[ERROR] Could not call execve" eputsln 1 exit
        end
        drop
    else
        NULL swap
        0    swap
        NULL swap
        wait4
        if dup 0 > not do
            "[ERROR] Waiting for the process went wrong" eputsln 1 exit
        end drop2
    end
end

proc compile_header
    ".section __TEXT, __text\n" write_fd
    ".global _main\n" write_fd
    ".align 3\n" write_fd
    ".macro push reg1:req\n" write_fd
    "   str \\reg1, [sp, #-16]!\n" write_fd
    ".endmacro\n" write_fd
    ".macro pop reg1:req\n" write_fd
    "   ldr \\reg1, [sp], #16\n" write_fd
    ".endmacro\n" write_fd
    "print:\n" write_fd
    "   sub     sp, sp,  #48\n" write_fd
    "   stp     x29, x30, [sp,  #32]\n" write_fd
    "   add     x29, sp,  #32\n" write_fd
    "   mov     x10,  #-3689348814741910324\n" write_fd
    "   mov     x8, xzr\n" write_fd
    "   mov     w9,  #10\n" write_fd
    "   movk    x10,  #52429\n" write_fd
    "   mov     x11, sp\n" write_fd
    "   strb    w9, [sp,  #31]\n" write_fd
    ".LBB0_1:\n" write_fd
    "   umulh   x12, x0, x10\n" write_fd
    "   add     x14, x11, x8\n" write_fd
    "   sub     x8, x8,  #1\n" write_fd
    "   cmp     x0,  #9\n" write_fd
    "   lsr     x12, x12,  #3\n" write_fd
    "   msub    w13, w12, w9, w0\n" write_fd
    "   mov     x0, x12\n" write_fd
    "   orr     w13, w13,  #0x30\n" write_fd
    "   strb    w13, [x14,  #30]\n" write_fd
    "   b.hi    .LBB0_1\n" write_fd
    "   mov     x9, sp\n" write_fd
    "   mov     w10,  #1\n" write_fd
    "   add     x9, x9, x8\n" write_fd
    "   sub     x2, x10, x8\n" write_fd
    "   add     x1, x9,  #31\n" write_fd
    "   mov     x0,  #1\n" write_fd
    "   mov     x16,  #4\n" write_fd
    "   svc  #0\n" write_fd
    "   ldp     x29, x30, [sp,  #32]\n" write_fd
    "   add     sp, sp,  #48\n" write_fd
    "   ret\n" write_fd
end

proc compile_footer
    "mov x16, #1\n" write_fd
    "mov x0, #0\n" write_fd
    "svc #0\n" write_fd
    ".section __DATA, __data\n" write_fd
    "   argc: .quad 0\n" write_fd
    "   argv: .quad 0\n" write_fd
    ".section __DATA, __bss\n" write_fd
    "mem:\n" write_fd
    "   .skip " write_fd MEM_CAPACITY writed_fd "\n" write_fd
end

// struct Loc {
//   filename: ptr    (8 bytes)
//   line_num: uint64 (8 bytes)
//   col_num:  uint64 (8 bytes)
// }

proc @Loc.filename Loc.filename + @8 end
proc @Loc.line_num Loc.line_num + @8 end
proc @Loc.col_num Loc.col_num + @8 end
proc @Loc
    dup @Loc.filename swap
    dup @Loc.line_num swap
    @Loc.col_num
end
proc !Loc.filename Loc.filename + !8 end
proc !Loc.line_num Loc.line_num + !8 end
proc !Loc.col_num Loc.col_num + !8 end

// struct Op {
//   type:    u64 (8 bytes)
//   operand: [int | Intrinsic] u64 (8 bytes)
// }

proc !Op.type Op.type + !8 end
proc !Op.operand Op.operand + !8 end
proc @Op.type Op.type + @8 end
proc @Op.operand Op.operand + @8 end
proc !Op !Op.operand !Op.type end
proc @Op dup @Op.type swap @Op.operand end

// expects: type: int, operand: int
proc push_op
    if op_stack_count @8 OP_STACK_CAP >= do
        here eputs "[ERROR] Op stack overflow" eputsln 1 exit
    end
    op_stack_count @8 sizeof(Op) * op_stack +
    dup rot swap !Op
    op_stack_count inc8
end

proc Loc.puts() // loc: Loc -> None
    @Loc
    rot dup ->ptr strlen swap puts ":" puts
    "[" puts
    swap 1 + putd ":" puts
    putd
    "] " puts
end

proc Loc.eputs() // loc: Loc -> None
    @Loc
    rot dup ->ptr strlen swap eputs ":" eputs
    "[" eputs
    swap 1 + eputd ":" eputs
    putd
    "] " eputs
end


proc report_error // n: int, s: ptr -> None
    loc Loc.eputs()
    "[ERROR] " eputs
end

proc get_word_as_int // None -> int
    0 0 while dup word @Str.length < do
        swap 10 * swap
        dup word @Str.data + @
        if dup isdigit not do
            // TODO: Add a parse_int proc to std
             report_error "Unknown word: " eputs word @Str eputsln
            1 exit
        end
        '0' - rot +
        swap
        1 +
    end drop
end

proc print_usage
    "Usage: photon.py <SUBCOMMAND>\n" puts
    "Subcommands:\n" puts
    "     sim <FILENAME>     Simulate the program in a macos little endian environment\n" puts
    "     com <FILENAME>     Compile the program to arm 64-bit assembly\n" puts
    "     dump <FILENAME>    Print the operations of the program\n" puts
end

proc create_output_file // output_name: ptr -> fd: int
    S_IRUSR S_IWUSR or
    O_WRONLY O_CREAT or O_TRUNC or
    rot
    open_create

    if dup -1 == do
        here eputs "[ERROR] Could not create output file" eputsln
        1 exit
    end
end

// Memory map file and save the pointer in content: Str
proc mmap_file
    // open file given as first argument
    O_RDONLY main_filename @8 ->ptr open

    if dup -1 == do
        here eputs "[ERROR] Could not open file: " eputs main_filename @8 ->ptr dup strlen swap eputsln
        1 exit
    end

    stat_buffer over fstat64

    if dup -1 == do
        here eputs "[ERROR] Failed to call fstat on file: " eputs main_filename @8 ->ptr dup strlen swap eputsln
        1 exit
    end drop

    stat_buffer stat.st_size @8 content Str.length !8

    0                       // offset
    swap                    // fd
    MAP_PRIVATE             // flags
    PROT_READ               // prot
    content Str.length @8   // len
    NULL                    // addr
    mmap

    content Str.data !8

    if content Str.data @8 0 < do
      here eputs "[ERROR] Could not memory map file " eputs main_filename @8 ->ptr dup strlen swap eputs "\n" eputs
      1 exit
    end
end

proc sim_stack_push // value: int
    if sim_stack_count @8 SIM_STACK_CAP >= do
        here eputs "[ERROR] data stack overflow in simulation mode" eputs 1 exit
    end
    sim_stack_count @8 8 * sim_stack + !8
    sim_stack_count inc8
end

proc sim_stack_pop // None -> value: int
    if sim_stack_count @8 0 <= do
        here eputs "[ERROR] data stack underflow in simulation mode" eputs 1 exit
    end
    sim_stack_count dec8
    sim_stack_count @8 8 * sim_stack + @8
end

// TODO: Add drop3 Intrinsic
memory assert_expected_counts sizeof(u64) 2 * end
proc assert_expected_int // here_len: int here_str: ptr actual_count: int expected_count: int
    swap assert_expected_counts !8
    assert_expected_counts sizeof(u64) + !8
    if assert_expected_counts @8 assert_expected_counts sizeof(u64) + @8 != do
        eputs "[ERROR] Assertion Fail: Actual value: " eputs assert_expected_counts @8 eputd
        ", differs from expected: " eputs assert_expected_counts sizeof(u64) + @8 eputd "\n" eputs
        1 exit
    else drop2 end
end

proc simulate_program
    here 2 OP_COUNT assert_expected_int
    0 while dup op_stack_count @8 < do
        dup sizeof(Op) * op_stack +
        if dup @Op.type OP_PUSH_INT == do
            dup @Op.operand sim_stack_push
        elif dup @Op.type OP_INTRINSIC == do
            here 31 INTRINSIC_COUNT assert_expected_int
            if dup @Op.operand INTRINSIC_ADD == do
                sim_stack_pop
                sim_stack_pop
                +
                sim_stack_push
            elif dup @Op.operand INTRINSIC_SUB == do
                sim_stack_pop
                sim_stack_pop
                swap
                -
                sim_stack_push
            elif dup @Op.operand INTRINSIC_MUL == do
                sim_stack_pop
                sim_stack_pop
                *
                sim_stack_push
            elif dup @Op.operand INTRINSIC_PRINT == do
                sim_stack_pop
                print
            elif dup @Op.operand INTRINSIC_DROP == do
                sim_stack_pop
                drop
            elif dup @Op.operand INTRINSIC_DUP == do
                sim_stack_pop
                dup
                sim_stack_push
                sim_stack_push
            elif dup @Op.operand INTRINSIC_DIV == do
                sim_stack_pop
                sim_stack_pop
                swap
                /
                sim_stack_push
            elif dup @Op.operand INTRINSIC_EQUAL == do
                sim_stack_pop
                sim_stack_pop
                ==
                sim_stack_push
            elif dup @Op.operand INTRINSIC_LT == do
                sim_stack_pop
                sim_stack_pop
                >
                sim_stack_push
            elif dup @Op.operand INTRINSIC_GT == do
                sim_stack_pop
                sim_stack_pop
                <
                sim_stack_push
            elif dup @Op.operand INTRINSIC_LTE == do
                sim_stack_pop
                sim_stack_pop
                >=
                sim_stack_push
            elif dup @Op.operand INTRINSIC_GTE == do
                sim_stack_pop
                sim_stack_pop
                <=
                sim_stack_push
            elif dup @Op.operand INTRINSIC_NE == do
                sim_stack_pop
                sim_stack_pop
                !=
                sim_stack_push
            elif dup @Op.operand INTRINSIC_AND == do
                sim_stack_pop
                sim_stack_pop
                and
                sim_stack_push
            elif dup @Op.operand INTRINSIC_OR == do
                sim_stack_pop
                sim_stack_pop
                or
                sim_stack_push
            elif dup @Op.operand INTRINSIC_BITNOT == do
                sim_stack_pop
                bnot
                sim_stack_push
            elif dup @Op.operand INTRINSIC_SHIFT_RIGHT == do
                sim_stack_pop
                sim_stack_pop
                swap
                >>
                sim_stack_push
            elif dup @Op.operand INTRINSIC_SHIFT_LEFT == do
                sim_stack_pop
                sim_stack_pop
                swap
                <<
                sim_stack_push
            elif dup @Op.operand INTRINSIC_SWAP == do
                sim_stack_pop
                sim_stack_pop
                swap
                sim_stack_push
                sim_stack_push
            elif dup @Op.operand INTRINSIC_OVER == do
                sim_stack_pop
                sim_stack_pop
                over
                sim_stack_push
                sim_stack_push
                sim_stack_push
            elif dup @Op.operand INTRINSIC_ROT == do
                sim_stack_pop
                sim_stack_pop
                sim_stack_pop
                rot
                sim_stack_push
                sim_stack_push
                sim_stack_push
            elif dup @Op.operand INTRINSIC_SYSCALL0 == do
                sim_stack_pop
                syscall0
                sim_stack_push
            elif dup @Op.operand INTRINSIC_SYSCALL1 == do
                sim_stack_pop
                sim_stack_pop
                syscall1
                sim_stack_push
            elif dup @Op.operand INTRINSIC_SYSCALL2 == do
                sim_stack_pop
                sim_stack_pop
                sim_stack_pop
                syscall2
                sim_stack_push
            elif dup @Op.operand INTRINSIC_SYSCALL3 == do
                sim_stack_pop
                sim_stack_pop
                sim_stack_pop
                sim_stack_pop
                syscall3
                sim_stack_push
            elif dup @Op.operand INTRINSIC_SYSCALL4 == do
                sim_stack_pop
                sim_stack_pop
                sim_stack_pop
                sim_stack_pop
                sim_stack_pop
                syscall4
                sim_stack_push
            elif dup @Op.operand INTRINSIC_SYSCALL5 == do
                sim_stack_pop
                sim_stack_pop
                sim_stack_pop
                sim_stack_pop
                sim_stack_pop
                sim_stack_pop
                syscall5
                sim_stack_push
            elif dup @Op.operand INTRINSIC_SYSCALL6 == do
                sim_stack_pop
                sim_stack_pop
                sim_stack_pop
                sim_stack_pop
                sim_stack_pop
                sim_stack_pop
                sim_stack_pop
                syscall6
                sim_stack_push
            elif dup @Op.operand INTRINSIC_CAST_PTR == do
                NOP
            elif dup @Op.operand INTRINSIC_CAST_INT == do
                NOP
            elif dup @Op.operand INTRINSIC_CAST_BOOL == do
                NOP
            else "Unhandled Intrinsic: " eputs dup @Op.operand eputd "\n" eputs 1 exit end
        else "Unhandled Operation: " eputs dup @Op.type eputd "\n" eputs 1 exit end drop
        1 +
    end drop
end

proc compile_program
    here 2 OP_COUNT assert_expected_int
    compile_header
    "_main:\n" write_fd
    0 while dup op_stack_count @8 < do
        dup sizeof(Op) * op_stack +
        if dup @Op.type OP_PUSH_INT == do
            "   ;; -- push int " write_fd dup @Op.operand writed_fd " --\n" write_fd
            "   ldr x0, =" write_fd dup @Op.operand writed_fd "\n" write_fd
            "   push x0\n" write_fd
        elif dup @Op.type OP_INTRINSIC == do
            here 31 INTRINSIC_COUNT assert_expected_int
            if dup @Op.operand INTRINSIC_ADD == do
                "   ;; -- add --\n" write_fd
                "   pop x0\n" write_fd
                "   pop x1\n" write_fd
                "   add x0, x0, x1\n" write_fd
                "   push x0\n" write_fd
            elif dup @Op.operand INTRINSIC_SUB == do
                "   ;; -- sub --\n" write_fd
                "   pop x0\n" write_fd
                "   pop x1\n" write_fd
                "   sub x0, x1, x0\n" write_fd
                "   push x0\n" write_fd
            elif dup @Op.operand INTRINSIC_MUL == do
                "   ;; -- mul --\n" write_fd
                "   pop x0\n" write_fd
                "   pop x1\n" write_fd
                "   mul x0, x0, x1\n" write_fd
                "   push x0\n" write_fd
            elif dup @Op.operand INTRINSIC_PRINT == do
                "   ;; -- print --\n" write_fd
                "   pop x0\n" write_fd
                "   bl print\n" write_fd
            elif dup @Op.operand INTRINSIC_DROP == do
                "   ;; -- drop --\n" write_fd
                "   pop x0\n" write_fd
            elif dup @Op.operand INTRINSIC_DUP == do
                "   ;; -- dup --\n" write_fd
                "   pop x0\n" write_fd
                "   push x0\n" write_fd
                "   push x0\n" write_fd
            elif dup @Op.operand INTRINSIC_DIV == do
                "   ;; -- div --\n" write_fd
                "   pop x0\n" write_fd
                "   pop x1\n" write_fd
                "   udiv x0, x1, x0\n" write_fd
                "   push x0\n" write_fd
            elif dup @Op.operand INTRINSIC_EQUAL == do
                "   ;; -- equal --\n" write_fd
                "   pop x0\n" write_fd
                "   pop x1\n" write_fd
                "   cmp x0, x1\n" write_fd
                "   cset x0, eq\n" write_fd
                "   push x0\n" write_fd
            elif dup @Op.operand INTRINSIC_LT == do
                "   ;; -- lt --\n" write_fd
                "   pop x0\n" write_fd
                "   pop x1\n" write_fd
                "   cmp x1, x0\n" write_fd
                "   cset x0, lt\n" write_fd
                "   push x0\n" write_fd
            elif dup @Op.operand INTRINSIC_GT == do
                "   ;; -- gt --\n" write_fd
                "   pop x0\n" write_fd
                "   pop x1\n" write_fd
                "   cmp x1, x0\n" write_fd
                "   cset x0, gt\n" write_fd
                "   push x0\n" write_fd
            elif dup @Op.operand INTRINSIC_LTE == do
                "   ;; -- lte --\n" write_fd
                "   pop x0\n" write_fd
                "   pop x1\n" write_fd
                "   cmp x1, x0\n" write_fd
                "   cset x0, le\n" write_fd
                "   push x0\n" write_fd
            elif dup @Op.operand INTRINSIC_GTE == do
                "   ;; -- gte --\n" write_fd
                "   pop x0\n" write_fd
                "   pop x1\n" write_fd
                "   cmp x1, x0\n" write_fd
                "   cset x0, ge\n" write_fd
                "   push x0\n" write_fd
            elif dup @Op.operand INTRINSIC_NE == do
                "   ;; -- not equal --\n" write_fd
                "   pop x0\n" write_fd
                "   pop x1\n" write_fd
                "   cmp x0, x1\n" write_fd
                "   cset x0, ne\n" write_fd
                "   push x0\n" write_fd
            elif dup @Op.operand INTRINSIC_AND == do
                "   ;; -- and --\n" write_fd
                "   pop x0\n" write_fd
                "   pop x1\n" write_fd
                "   and x0, x0, x1\n" write_fd
                "   push x0\n" write_fd
            elif dup @Op.operand INTRINSIC_OR == do
                "   ;; -- or --\n" write_fd
                "   pop x0\n" write_fd
                "   pop x1\n" write_fd
                "   orr x0, x0, x1\n" write_fd
                "   push x0\n" write_fd
            elif dup @Op.operand INTRINSIC_BITNOT == do
                "   ;; -- bitnot --\n" write_fd
                "   pop x0\n" write_fd
                "   mvn x0, x0\n" write_fd
                "   push x0\n" write_fd
            elif dup @Op.operand INTRINSIC_SHIFT_RIGHT == do
                "   ;; -- shift right --\n" write_fd
                "   pop x0\n" write_fd
                "   pop x1\n" write_fd
                "   lsr x0, x1, x0\n" write_fd
                "   push x0\n" write_fd
            elif dup @Op.operand INTRINSIC_SHIFT_LEFT == do
                "   ;; -- shift left --\n" write_fd
                "   pop x0\n" write_fd
                "   pop x1\n" write_fd
                "   lsl x0, x1, x0\n" write_fd
                "   push x0\n" write_fd
            elif dup @Op.operand INTRINSIC_SWAP == do
                "   ;; -- swap --\n" write_fd
                "   pop x0\n" write_fd
                "   pop x1\n" write_fd
                "   push x0\n" write_fd
                "   push x1\n" write_fd
            elif dup @Op.operand INTRINSIC_OVER == do
                "   ;; -- over --\n" write_fd
                "   pop x0\n" write_fd
                "   pop x1\n" write_fd
                "   push x1\n" write_fd
                "   push x0\n" write_fd
                "   push x1\n" write_fd
            elif dup @Op.operand INTRINSIC_ROT == do
                "   ;; -- rot --\n" write_fd
                "   pop x0\n" write_fd
                "   pop x1\n" write_fd
                "   pop x2\n" write_fd
                "   push x1\n" write_fd
                "   push x0\n" write_fd
                "   push x2\n" write_fd
            elif dup @Op.operand INTRINSIC_SYSCALL0 == do
                "   ;; -- syscall0 --\n" write_fd
                "   pop x16\n" write_fd
                "   svc #0\n" write_fd
                "   b.cc return_ok_" write_fd over writed_fd "\n" write_fd
                "   mov x0, #-1\n" write_fd
                "return_ok_" write_fd over writed_fd ":\n" write_fd
                "   push x0\n" write_fd
            elif dup @Op.operand INTRINSIC_SYSCALL1 == do
                "   ;; -- syscall1 --\n" write_fd
                "   pop x16\n" write_fd
                "   pop x0\n" write_fd
                "   svc #0\n" write_fd
                "   b.cc return_ok_" write_fd over writed_fd "\n" write_fd
                "   mov x0, #-1\n" write_fd
                "return_ok_" write_fd over writed_fd ":\n" write_fd
                "   push x0\n" write_fd
            elif dup @Op.operand INTRINSIC_SYSCALL2 == do
                "   ;; -- syscall2 --\n" write_fd
                "   pop x16\n" write_fd
                "   pop x0\n" write_fd
                "   pop x1\n" write_fd
                "   svc #0\n" write_fd
                "   b.cc return_ok_" write_fd over writed_fd "\n" write_fd
                "   mov x0, #-1\n" write_fd
                "return_ok_" write_fd over writed_fd ":\n" write_fd
                "   push x0\n" write_fd
            elif dup @Op.operand INTRINSIC_SYSCALL3 == do
                "   ;; -- syscall3 --\n" write_fd
                "   pop x16\n" write_fd
                "   pop x0\n" write_fd
                "   pop x1\n" write_fd
                "   pop x2\n" write_fd
                "   svc #0\n" write_fd
                "   b.cc return_ok_" write_fd over writed_fd "\n" write_fd
                "   mov x0, #-1\n" write_fd
                "return_ok_" write_fd over writed_fd ":\n" write_fd
                "   push x0\n" write_fd
            elif dup @Op.operand INTRINSIC_SYSCALL4 == do
                "   ;; -- syscall4 --\n" write_fd
                "   pop x16\n" write_fd
                "   pop x0\n" write_fd
                "   pop x1\n" write_fd
                "   pop x2\n" write_fd
                "   pop x3\n" write_fd
                "   svc #0\n" write_fd
                "   b.cc return_ok_" write_fd over writed_fd "\n" write_fd
                "   mov x0, #-1\n" write_fd
                "return_ok_" write_fd over writed_fd ":\n" write_fd
                "   push x0\n" write_fd
            elif dup @Op.operand INTRINSIC_SYSCALL5 == do
                "   ;; -- syscall5 --\n" write_fd
                "   pop x16\n" write_fd
                "   pop x0\n" write_fd
                "   pop x1\n" write_fd
                "   pop x2\n" write_fd
                "   pop x3\n" write_fd
                "   pop x4\n" write_fd
                "   svc #0\n" write_fd
                "   b.cc return_ok_" write_fd over writed_fd "\n" write_fd
                "   mov x0, #-1\n" write_fd
                "return_ok_" write_fd over writed_fd ":\n" write_fd
                "   push x0\n" write_fd
            elif dup @Op.operand INTRINSIC_SYSCALL6 == do
                "   ;; -- syscall6 --\n" write_fd
                "   pop x16\n" write_fd
                "   pop x0\n" write_fd
                "   pop x1\n" write_fd
                "   pop x2\n" write_fd
                "   pop x3\n" write_fd
                "   pop x4\n" write_fd
                "   pop x5\n" write_fd
                "   svc #0\n" write_fd
                "   b.cc return_ok_" write_fd over writed_fd "\n" write_fd
                "   mov x0, #-1\n" write_fd
                "return_ok_" write_fd over writed_fd ":\n" write_fd
                "   push x0\n" write_fd
            elif dup @Op.operand INTRINSIC_CAST_PTR == do
                "   ;; -- cast ptr --\n" write_fd
            elif dup @Op.operand INTRINSIC_CAST_INT == do
                "   ;; -- cast int --\n" write_fd
            elif dup @Op.operand INTRINSIC_CAST_BOOL == do
                "   ;; -- cast ptr --\n" write_fd
           else "Unhandled Intrinsic: " eputs dup @Op.operand eputd "\n" eputs  1 exit end
        else "Unhandled Operation: " eputs dup @Op.type eputd "\n" eputs  1 exit end drop
        1 +
    end drop
    compile_footer
end

proc print_ops
    0 while dup op_stack_count @8 < do
        dup sizeof(Op) * op_stack +
        "Type: " puts dup @Op.type putd
        ", Operand: " puts @Op.operand print
        1 +
    end drop
end

// Expects file contents to be in content: Str
// Expects that line, word are allocated
proc parse_file_as_op
    here 2 OP_COUNT assert_expected_int
    here 31 INTRINSIC_COUNT assert_expected_int
    main_filename @8 ->ptr loc !Loc.filename
    0 while content Str.length @8 0 > do
        dup loc !Loc.line_num
        line content '\n' Str.chop_until()
        line @Str.data
        while line Str.length @8 0 > do
            line Str.left_strip()
            dup line @Str.data swap - loc !Loc.col_num
            word line ' ' Str.chop_until()
            if word @Str "+" Str.equal() do
                OP_INTRINSIC INTRINSIC_ADD push_op
            elif word @Str "-" Str.equal() do
                OP_INTRINSIC INTRINSIC_SUB push_op
            elif word @Str "*" Str.equal() do
                OP_INTRINSIC INTRINSIC_MUL push_op
            elif word @Str "print" Str.equal() do
                OP_INTRINSIC INTRINSIC_PRINT push_op
            elif word @Str "dup" Str.equal() do
                OP_INTRINSIC INTRINSIC_DUP push_op
            elif word @Str "drop" Str.equal() do
                OP_INTRINSIC INTRINSIC_DROP push_op
            elif word @Str "/" Str.equal() do
                OP_INTRINSIC INTRINSIC_DIV push_op
            elif word @Str "==" Str.equal() do
                OP_INTRINSIC INTRINSIC_EQUAL push_op
            elif word @Str "<" Str.equal() do
                OP_INTRINSIC INTRINSIC_LT push_op
            elif word @Str ">" Str.equal() do
                OP_INTRINSIC INTRINSIC_GT push_op
            elif word @Str "<=" Str.equal() do
                OP_INTRINSIC INTRINSIC_LTE push_op
            elif word @Str ">=" Str.equal() do
                OP_INTRINSIC INTRINSIC_GTE push_op
            elif word @Str "!=" Str.equal() do
                OP_INTRINSIC INTRINSIC_NE push_op
            elif word @Str "and" Str.equal() do
                OP_INTRINSIC INTRINSIC_AND push_op
            elif word @Str "or" Str.equal() do
                OP_INTRINSIC INTRINSIC_OR push_op
            elif word @Str "bnot" Str.equal() do
                OP_INTRINSIC INTRINSIC_BITNOT push_op
            elif word @Str ">>" Str.equal() do
                OP_INTRINSIC INTRINSIC_SHIFT_RIGHT push_op
            elif word @Str "<<" Str.equal() do
                OP_INTRINSIC INTRINSIC_SHIFT_LEFT push_op
            elif word @Str "swap" Str.equal() do
                OP_INTRINSIC INTRINSIC_SWAP push_op
            elif word @Str "over" Str.equal() do
                OP_INTRINSIC INTRINSIC_OVER push_op
            elif word @Str "rot" Str.equal() do
                OP_INTRINSIC INTRINSIC_ROT push_op
            elif word @Str "syscall0" Str.equal() do
                OP_INTRINSIC INTRINSIC_SYSCALL0 push_op
            elif word @Str "syscall1" Str.equal() do
                OP_INTRINSIC INTRINSIC_SYSCALL1 push_op
            elif word @Str "syscall2" Str.equal() do
                OP_INTRINSIC INTRINSIC_SYSCALL2 push_op
            elif word @Str "syscall3" Str.equal() do
                OP_INTRINSIC INTRINSIC_SYSCALL3 push_op
            elif word @Str "syscall4" Str.equal() do
                OP_INTRINSIC INTRINSIC_SYSCALL4 push_op
            elif word @Str "syscall5" Str.equal() do
                OP_INTRINSIC INTRINSIC_SYSCALL5 push_op
            elif word @Str "syscall6" Str.equal() do
                OP_INTRINSIC INTRINSIC_SYSCALL6 push_op
            elif word @Str "->ptr" Str.equal() do
                OP_INTRINSIC INTRINSIC_CAST_PTR push_op
            elif word @Str "->int" Str.equal() do
                OP_INTRINSIC INTRINSIC_CAST_INT push_op
            elif word @Str "->bool" Str.equal() do
                OP_INTRINSIC INTRINSIC_CAST_BOOL push_op
            else
                OP_PUSH_INT get_word_as_int push_op
            end
        end drop
        1 +
    end drop
end

proc main
    if argc 3 < do
        print_usage
    else
        2 argv[n] main_filename !8
        1 argv[n]
        if dup "sim\0" streq do
            mmap_file
            parse_file_as_op
            simulate_program
        elif dup "com\0" streq do
            mmap_file
            parse_file_as_op
            "output.s\0" create_output_file
            fd !8
            compile_program
            com_setup
            as_argv call_proc
            ld_argv call_proc
        elif dup "dump\0" streq do
            mmap_file
            parse_file_as_op
            print_ops
        else "[ERROR] Invalid Subcommand\n" eputs print_usage 1 exit
        end
        drop
    end
end

main